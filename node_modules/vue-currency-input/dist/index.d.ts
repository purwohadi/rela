import { Ref } from 'vue-demi';

interface CurrencyInputValue {
    number: number | null;
    formatted: string | null;
}
interface NumberRange {
    min?: number;
    max?: number;
}
declare enum CurrencyDisplay {
    symbol = "symbol",
    narrowSymbol = "narrowSymbol",
    code = "code",
    name = "name",
    hidden = "hidden"
}
declare enum ValueScaling {
    precision = "precision",
    thousands = "thousands",
    millions = "millions",
    billions = "billions"
}
interface CurrencyFormatOptions {
    locale?: string;
    currency: string;
    currencyDisplay?: CurrencyDisplay;
    precision?: NumberRange | number;
    accountingSign?: boolean;
}
interface CurrencyInputOptions extends CurrencyFormatOptions {
    /**
     * @deprecated Use `valueScaling` instead.
     */
    exportValueAsInteger?: boolean;
    hideCurrencySymbolOnFocus?: boolean;
    hideGroupingSeparatorOnFocus?: boolean;
    hideNegligibleDecimalDigitsOnFocus?: boolean;
    autoDecimalDigits?: boolean;
    autoSign?: boolean;
    valueRange?: NumberRange;
    useGrouping?: boolean;
    valueScaling?: ValueScaling;
}
interface UseCurrencyInput {
    inputRef: Ref;
    numberValue: Ref<number | null>;
    formattedValue: Ref<string | null>;
    setValue: (number: number | null) => void;
    setOptions: (options: CurrencyInputOptions) => void;
}

declare const _default: (options: CurrencyInputOptions, autoEmit?: boolean | undefined) => UseCurrencyInput;

declare const parse: (formattedValue: string | null, options: CurrencyFormatOptions) => number | null;

export { CurrencyDisplay, CurrencyFormatOptions, CurrencyInputOptions, CurrencyInputValue, NumberRange, UseCurrencyInput, ValueScaling, _default as default, parse, _default as useCurrencyInput };
